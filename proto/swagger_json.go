package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_comments_proto_comments_business_comments_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcb\x6e\xdb\x46\x17\xde\xeb\x29\x06\xfc\xff\x65\x11\xa7\x69\xd1\x45\x76\x8c\xcc\x04\x02\x64\xa9\x90\xe8\xa0\x45\x61\x10\x23\xf2\x48\x1e\x97\x9c\xa1\x67\x86\x6a\x84\xc2\xbb\x00\xed\xa6\xed\xa2\x97\x6c\xdb\xae\xba\xa9\xb3\x0c\xea\x02\xed\xcb\xc4\xa9\xfb\x16\x05\x29\x92\xe2\x5d\x14\x29\xf9\x02\x58\x40\x00\x69\xce\xcc\x99\x73\xfb\xce\x65\xe2\x2f\x3b\x08\x29\xe2\x0b\x3c\x9b\x01\x57\x1e\x23\xe5\xd1\x83\x87\xca\x7b\xfe\x1a\xa1\x53\xa6\x3c\x46\x3e\x1d\x21\x45\x12\x69\x83\x4f\x77\x39\x93\x6c\xcf\x21\x26\x67\x86\x83\x6d\xdb\x30\x99\xe3\x00\x95\xc2\x58\x52\xe2\x9f\x13\x4f\x10\x0a\x42\xc4\x2b\x0f\x82\x0d\x01\x73\x84\x94\x39\x70\x41\x18\xf5\x59\x86\x5f\x11\x65\x12\x09\x90\x4a\x07\xa1\xb3\x40\x04\x93\x51\xe1\x39\x20\x94\xc7\xe8\xb3\xe5\x29\xec\xba\x36\x31\xb1\x24\x8c\xee\x9d\x08\x46\xfd\xbd\x47\xc1\x5e\x97\x33\xcb\x33\x6b\xee\xc5\xf2\x58\xac\x74\xdb\x9b\xbf\x1f\x0b\xb9\x67\x13\x21\x63\x12\x42\xca\x0c\x92\x3f\x7d\x5b\x79\x8e\x83\xf9\xc2\x17\xfc\xea\xdb\x37\x97\xdf\xfd\x74\x79\xf1\xea\xdf\xef\x2f\xae\x5e\xbf\xbc\x3a\xbf\xb8\xfc\xfa\xd5\xd5\x2f\xbf\x85\x3a\x06\xdb\x99\x0b\x3c\x90\xa1\x67\xf9\x47\xba\xe1\x3d\x4f\x42\xeb\x8c\x81\xcf\x89\x09\xc6\x53\x42\xad\xf1\x31\x73\x23\x7a\x92\x05\x07\xe1\x32\x2a\x40\xa4\x04\x41\x48\x79\xf4\xf0\x61\x66\x09\x21\xc5\x02\x61\x72\xe2\xca\xd0\xb8\x2a\x12\x9e\x69\x82\x10\x53\xcf\x46\x11\xa7\x07\x09\xf6\x4b\xa5\xcc\x63\x70\x70\x8e\x19\x42\xca\xff\x39\x4c\x7d\x3e\xff\xdb\xb3\x60\x4a\x28\xf1\xf9\x8a\xbc\x97\xb3\xf2\x8f\xc2\x9b\x94\x14\xbf\xb3\xc4\xaf\xb3\xa4\x08\x8a\x05\x53\xec\xd9\x72\xbd\x3a\x14\x79\x14\x5e\xb8\x60\x4a\xb0\x10\x70\xce\x78\xac\x55\x5b\xa5\xb8\x47\x25\x71\x40\xf3\x99\x56\xc8\xdd\x29\xd0\x40\x71\x31\xc7\x0e\x48\xe0\xab\x00\x5c\x7e\x32\xea\x50\xec\x04\x30\x12\xc7\xcc\x35\x88\x95\x15\x99\x04\x4a\x9e\x7a\xc0\x17\x59\x12\x87\x53\x8f\x70\xf0\xa3\x68\x8a\x6d\x01\x19\xb2\x5c\xb8\x4b\xc6\x92\x13\x3a\xcb\x1e\x9e\x32\xee\x60\xdf\xba\x0a\xa1\xf2\xa3\x0f\x95\x32\x3f\x94\x48\xeb\xdd\x0e\x49\xe3\xef\x47\x09\xcb\x4b\x3c\xcb\xda\xbc\x0c\x65\x2b\x66\x47\x9d\x24\xcb\xd0\x04\xe9\x44\xc0\xb8\x15\x64\xc4\x38\x13\xb8\x4c\x54\xa4\x82\xf3\x5f\x2f\xbf\xf9\xf1\xea\xf5\xcb\xb7\x7f\xbe\x69\x00\xff\x68\x7d\x18\x5c\x7a\xc7\xb0\x9f\x12\xfe\x1e\xf8\xe1\xa7\x04\x4a\x13\x66\xe5\x00\xb3\xc4\x52\x11\x25\x01\x25\xc9\xbd\x2c\x92\xb6\xed\xb9\x53\x0f\x84\xac\x63\x80\xeb\xc0\x9f\xcf\xb7\x41\x35\x5e\xd6\xe1\x77\x3f\x7f\xf5\xcf\xef\x7f\x35\xac\xc3\x11\x4d\xf7\x35\xbb\x63\x58\xcc\xc8\x7f\x8f\xc6\xf0\x53\x82\x46\x89\x67\x86\xc9\xac\x9c\xcc\x5b\xab\x6e\x1b\x16\x5a\xd3\xc6\x42\x90\x69\xd8\xb6\x1a\x0e\x3e\x61\xfc\xb6\xca\x06\x16\xf1\x9c\x6b\x11\xee\xfa\xf3\x8e\xc3\x2c\x32\x5d\xd4\xae\xfe\x6f\xff\x3e\x7f\xf7\xc3\x1f\x2d\x53\xcf\x41\x70\xe7\x5d\x4e\x3e\x79\x0d\xee\xf3\x4f\xf8\xb9\x0b\xdd\x40\x91\xfb\x6e\xac\x25\x88\x1f\x01\x12\x22\xaf\x46\xf6\x7a\x9d\x4c\x02\xbe\x51\x76\x61\x93\x13\x30\x65\x6c\x58\xc5\xe5\x3e\x3a\x25\xc9\xe0\x2a\x98\x78\x32\x40\xab\x98\x5b\xca\xa7\x96\x64\x70\x04\x13\x85\x91\x7a\x57\xd9\xcc\x41\x81\x72\x91\xa6\x3d\x9f\x4f\xe1\x3d\x36\x9b\x11\x21\x89\x29\xda\xdc\xd5\x8f\x98\xac\xbf\x0f\x53\x46\x17\x0e\x91\x8b\x32\x8b\x4d\x18\xb3\x01\xd3\x32\x93\x45\xe4\x4e\x36\xaa\xd2\x59\xba\xe6\xdc\xd1\xc2\xe9\xfe\x0d\x41\x7e\x69\x62\xb0\x6e\x70\x38\x9f\xf0\x36\x54\x46\x5f\x62\xa7\xb1\x0e\x71\x47\x53\x1d\xbd\x85\x8e\x2c\xec\x3e\xb6\xc0\x67\xd9\x29\x6c\x81\x11\xa1\x0d\x05\x62\x54\x02\xcd\x96\x95\x5a\x47\x85\xc4\xb2\xd4\x98\x3b\x0c\xec\x44\x28\xb5\x8a\xe8\x7c\x24\xd4\x8c\xe7\x11\xc8\xae\x7f\xba\xd0\x2a\x8e\x98\xd5\x36\x66\x3d\x9d\xcb\x06\x97\x5b\x07\xe7\x7c\x9d\x2b\x34\x03\xe6\x1c\xa7\x0b\xb8\x42\x24\x38\xd9\xfd\x9b\xcf\xea\x41\x82\x28\x6e\x44\xea\x5b\xba\xf0\xa9\xf6\x36\x9b\x3a\x3e\x94\x79\x11\xd8\xad\xcd\x2b\x0a\x6e\x03\xc3\x17\x97\xd4\x16\x56\x5f\x15\xfa\xa6\x19\x7f\x0a\x16\xbc\x30\x5c\x6c\x7e\xde\xd0\x77\x63\x89\x79\x1f\xe6\x60\x57\xf1\xb7\xf1\x04\xec\xf6\x4e\xab\x33\x21\x26\x2f\xb7\xc0\x26\x73\xe0\x0b\x43\xb8\x00\xb9\x76\x6e\x3b\x0a\xa6\xef\xb8\x79\x4d\xc3\xae\x7a\xc7\xba\x86\x13\xeb\x0d\x69\x1b\xca\xbd\xe5\x02\x54\x3e\xfd\xb4\x40\x28\x73\x8d\xf0\x48\xa3\x7e\x3f\x7a\x38\xd0\x7d\x1e\x65\x25\xa8\x45\xd6\xcd\xd7\x93\x16\xc6\xba\x03\x55\x64\xe3\xe6\xb8\x9e\x35\xd2\x7e\x2a\x30\x40\x66\x64\x54\x80\x06\xfd\xf0\x6a\x40\x56\xba\x23\x4d\xd5\xb5\xe4\x83\xcf\xe1\xc7\xfb\x99\x95\x7d\xad\xaf\xa5\x57\xd4\xc3\xfd\x9e\x1e\x89\x1b\x4f\xe0\x89\x57\x94\x88\xef\x1a\xf9\x73\x65\xae\x85\x13\xa3\xff\xd9\xdc\xcd\xf4\xdc\xb4\xd0\x09\x89\xb9\x61\x07\xb9\x6d\x27\xb9\xb1\xc5\x84\x41\x9c\xd9\x96\xba\x9a\x86\x89\x74\xbd\xb7\x36\x05\x44\x34\x3b\x34\x82\xc2\xf8\xb0\xdb\xd5\xc6\xe3\x64\x9c\x6b\xa3\xd1\x70\x94\x02\xc7\x58\x1b\x19\x83\xa1\x6e\x68\x9f\xf4\xc6\x7a\x8e\x52\xbc\x3a\x1c\xed\x57\x9e\x5a\xd2\xc7\xba\xaa\x6b\x46\x6f\xf0\x5c\xed\xf7\xf6\x93\x7b\xba\xc3\x83\x03\x6d\xa0\x17\x33\x88\x88\x39\x82\x3e\x52\x07\x63\xb5\xab\xf7\x86\x03\xe3\xa9\xda\xeb\x6b\x85\x3c\x75\xf5\x59\x35\x5f\x7f\xc3\x92\x58\x85\xf6\xc8\x74\xd5\xde\x59\x85\x72\x23\xff\x3c\xd7\x46\x9f\x1a\xcf\x86\xc3\x94\x22\xb9\xdf\xda\x40\x1b\xa9\xfd\xe4\xd2\x13\x35\xb5\x23\x60\xe3\xaf\x55\x29\xb4\xba\x2b\xa5\x52\xf0\x97\x44\x13\x6f\xaa\xd2\x45\xab\xb7\x92\x85\x0b\x86\xc7\x4b\x5b\x98\x2a\xd4\xce\xb1\xed\xad\xcb\x44\x65\xcf\x02\x0b\xb9\xf6\x7d\x28\xf5\x08\xdd\x42\x45\xc8\x30\xa8\xad\x5f\x55\xa2\x25\x54\xc2\x0c\x78\x45\x12\xff\xe0\x51\xc9\xbb\x01\x08\x81\x67\x8d\x32\xb8\x05\x12\x13\x7b\x67\xf3\x76\x32\xa4\x8a\x13\x67\xda\x4f\x1d\xff\xdf\x59\xe7\xbf\x00\x00\x00\xff\xff\x78\x4e\x37\x12\x3f\x27\x00\x00")

func proto_micro_mall_comments_proto_comments_business_comments_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_comments_proto_comments_business_comments_swagger_json,
		"proto/micro_mall_comments_proto/comments_business/comments.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_comments_proto/comments_business/comments.swagger.json": proto_micro_mall_comments_proto_comments_business_comments_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_comments_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"comments_business": &_bintree_t{nil, map[string]*_bintree_t{
				"comments.swagger.json": &_bintree_t{proto_micro_mall_comments_proto_comments_business_comments_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
